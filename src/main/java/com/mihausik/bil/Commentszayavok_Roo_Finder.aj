// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mihausik.bil;

import com.mihausik.bil.Commentszayavok;
import com.mihausik.bil.Proverkatahvozm;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Commentszayavok_Roo_Finder {
    
    public static Long Commentszayavok.countFindCommentszayavoksByProverkatahvozm(Proverkatahvozm proverkatahvozm) {
        if (proverkatahvozm == null) throw new IllegalArgumentException("The proverkatahvozm argument is required");
        EntityManager em = Commentszayavok.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Commentszayavok AS o WHERE o.proverkatahvozm = :proverkatahvozm", Long.class);
        q.setParameter("proverkatahvozm", proverkatahvozm);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Commentszayavok> Commentszayavok.findCommentszayavoksByProverkatahvozm(Proverkatahvozm proverkatahvozm) {
        if (proverkatahvozm == null) throw new IllegalArgumentException("The proverkatahvozm argument is required");
        EntityManager em = Commentszayavok.entityManager();
        TypedQuery<Commentszayavok> q = em.createQuery("SELECT o FROM Commentszayavok AS o WHERE o.proverkatahvozm = :proverkatahvozm", Commentszayavok.class);
        q.setParameter("proverkatahvozm", proverkatahvozm);
        return q;
    }
    
    public static TypedQuery<Commentszayavok> Commentszayavok.findCommentszayavoksByProverkatahvozm(Proverkatahvozm proverkatahvozm, String sortFieldName, String sortOrder) {
        if (proverkatahvozm == null) throw new IllegalArgumentException("The proverkatahvozm argument is required");
        EntityManager em = Commentszayavok.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Commentszayavok AS o WHERE o.proverkatahvozm = :proverkatahvozm");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Commentszayavok> q = em.createQuery(queryBuilder.toString(), Commentszayavok.class);
        q.setParameter("proverkatahvozm", proverkatahvozm);
        return q;
    }
    
}
