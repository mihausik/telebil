// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mihausik.bil;

import com.mihausik.bil.Clientservice;
import com.mihausik.bil.Clientservicestatus;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Clientservicestatus_Roo_Finder {
    
    public static Long Clientservicestatus.countFindClientservicestatusesByClientservice(Clientservice clientservice) {
        if (clientservice == null) throw new IllegalArgumentException("The clientservice argument is required");
        EntityManager em = Clientservicestatus.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Clientservicestatus AS o WHERE o.clientservice = :clientservice", Long.class);
        q.setParameter("clientservice", clientservice);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Clientservicestatus> Clientservicestatus.findClientservicestatusesByClientservice(Clientservice clientservice) {
        if (clientservice == null) throw new IllegalArgumentException("The clientservice argument is required");
        EntityManager em = Clientservicestatus.entityManager();
        TypedQuery<Clientservicestatus> q = em.createQuery("SELECT o FROM Clientservicestatus AS o WHERE o.clientservice = :clientservice", Clientservicestatus.class);
        q.setParameter("clientservice", clientservice);
        return q;
    }
    
    public static TypedQuery<Clientservicestatus> Clientservicestatus.findClientservicestatusesByClientservice(Clientservice clientservice, String sortFieldName, String sortOrder) {
        if (clientservice == null) throw new IllegalArgumentException("The clientservice argument is required");
        EntityManager em = Clientservicestatus.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Clientservicestatus AS o WHERE o.clientservice = :clientservice");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Clientservicestatus> q = em.createQuery(queryBuilder.toString(), Clientservicestatus.class);
        q.setParameter("clientservice", clientservice);
        return q;
    }
    
}
