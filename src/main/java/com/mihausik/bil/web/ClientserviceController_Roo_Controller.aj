// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mihausik.bil.web;

import com.mihausik.bil.Callplan;
import com.mihausik.bil.Client;
import com.mihausik.bil.Clientservice;
import com.mihausik.bil.Commutator;
import com.mihausik.bil.Connectiontype;
import com.mihausik.bil.Service;
import com.mihausik.bil.web.ClientserviceController;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ClientserviceController_Roo_Controller {

    @RequestMapping(produces = "text/html")
    public String ClientserviceController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("clientservices", Clientservice.findClientserviceEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) Clientservice.countClientservices() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("clientservices", Clientservice.findAllClientservices(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "clientservices/list";
    }



    void ClientserviceController.populateEditForm(Model uiModel, Clientservice clientservice) {
        uiModel.addAttribute("clientservice", clientservice);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("callplans", Callplan.findAllCallplans());
        uiModel.addAttribute("clients", Client.findAllClients());
        uiModel.addAttribute("commutators", Commutator.findAllCommutators());
        uiModel.addAttribute("connectiontypes", Arrays.asList(Connectiontype.values()));
        uiModel.addAttribute("services", Service.findAllServices());
    }

    String ClientserviceController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }

}
