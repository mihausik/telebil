// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mihausik.bil;

import com.mihausik.bil.Clientservice;
import com.mihausik.bil.Clientserviceip;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Clientserviceip_Roo_Finder {
    
    public static Long Clientserviceip.countFindClientserviceipsByClientservice(Clientservice clientservice) {
        if (clientservice == null) throw new IllegalArgumentException("The clientservice argument is required");
        EntityManager em = Clientserviceip.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Clientserviceip AS o WHERE o.clientservice = :clientservice", Long.class);
        q.setParameter("clientservice", clientservice);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Clientserviceip.countFindClientserviceipsByIpLike(String ip) {
        if (ip == null || ip.length() == 0) throw new IllegalArgumentException("The ip argument is required");
        ip = ip.replace('*', '%');
        if (ip.charAt(0) != '%') {
            ip = "%" + ip;
        }
        if (ip.charAt(ip.length() - 1) != '%') {
            ip = ip + "%";
        }
        EntityManager em = Clientserviceip.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Clientserviceip AS o WHERE LOWER(o.ip) LIKE LOWER(:ip)", Long.class);
        q.setParameter("ip", ip);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Clientserviceip> Clientserviceip.findClientserviceipsByClientservice(Clientservice clientservice) {
        if (clientservice == null) throw new IllegalArgumentException("The clientservice argument is required");
        EntityManager em = Clientserviceip.entityManager();
        TypedQuery<Clientserviceip> q = em.createQuery("SELECT o FROM Clientserviceip AS o WHERE o.clientservice = :clientservice", Clientserviceip.class);
        q.setParameter("clientservice", clientservice);
        return q;
    }
    
    public static TypedQuery<Clientserviceip> Clientserviceip.findClientserviceipsByClientservice(Clientservice clientservice, String sortFieldName, String sortOrder) {
        if (clientservice == null) throw new IllegalArgumentException("The clientservice argument is required");
        EntityManager em = Clientserviceip.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Clientserviceip AS o WHERE o.clientservice = :clientservice");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Clientserviceip> q = em.createQuery(queryBuilder.toString(), Clientserviceip.class);
        q.setParameter("clientservice", clientservice);
        return q;
    }
    
    public static TypedQuery<Clientserviceip> Clientserviceip.findClientserviceipsByIpLike(String ip, String sortFieldName, String sortOrder) {
        if (ip == null || ip.length() == 0) throw new IllegalArgumentException("The ip argument is required");
        ip = ip.replace('*', '%');
        if (ip.charAt(0) != '%') {
            ip = "%" + ip;
        }
        if (ip.charAt(ip.length() - 1) != '%') {
            ip = ip + "%";
        }
        EntityManager em = Clientserviceip.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Clientserviceip AS o WHERE LOWER(o.ip) LIKE LOWER(:ip)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Clientserviceip> q = em.createQuery(queryBuilder.toString(), Clientserviceip.class);
        q.setParameter("ip", ip);
        return q;
    }
    
}
