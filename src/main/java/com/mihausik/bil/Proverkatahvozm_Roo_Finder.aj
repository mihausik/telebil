// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mihausik.bil;

import com.mihausik.bil.Manager;
import com.mihausik.bil.Proverkatahvozm;
import com.mihausik.bil.TVexist;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Proverkatahvozm_Roo_Finder {
    
    public static Long Proverkatahvozm.countFindProverkatahvozmsByAddrpodclucheniaLike(String addrpodcluchenia) {
        if (addrpodcluchenia == null || addrpodcluchenia.length() == 0) throw new IllegalArgumentException("The addrpodcluchenia argument is required");
        addrpodcluchenia = addrpodcluchenia.replace('*', '%');
        if (addrpodcluchenia.charAt(0) != '%') {
            addrpodcluchenia = "%" + addrpodcluchenia;
        }
        if (addrpodcluchenia.charAt(addrpodcluchenia.length() - 1) != '%') {
            addrpodcluchenia = addrpodcluchenia + "%";
        }
        EntityManager em = Proverkatahvozm.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Proverkatahvozm AS o WHERE LOWER(o.addrpodcluchenia) LIKE LOWER(:addrpodcluchenia)", Long.class);
        q.setParameter("addrpodcluchenia", addrpodcluchenia);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Proverkatahvozm.countFindProverkatahvozmsByManager(Manager manager) {
        if (manager == null) throw new IllegalArgumentException("The manager argument is required");
        EntityManager em = Proverkatahvozm.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Proverkatahvozm AS o WHERE o.manager = :manager", Long.class);
        q.setParameter("manager", manager);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Proverkatahvozm.countFindProverkatahvozmsByTvexistence(TVexist tvexistence) {
        if (tvexistence == null) throw new IllegalArgumentException("The tvexistence argument is required");
        EntityManager em = Proverkatahvozm.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Proverkatahvozm AS o WHERE o.tvexistence = :tvexistence", Long.class);
        q.setParameter("tvexistence", tvexistence);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Proverkatahvozm> Proverkatahvozm.findProverkatahvozmsByAddrpodclucheniaLike(String addrpodcluchenia) {
        if (addrpodcluchenia == null || addrpodcluchenia.length() == 0) throw new IllegalArgumentException("The addrpodcluchenia argument is required");
        addrpodcluchenia = addrpodcluchenia.replace('*', '%');
        if (addrpodcluchenia.charAt(0) != '%') {
            addrpodcluchenia = "%" + addrpodcluchenia;
        }
        if (addrpodcluchenia.charAt(addrpodcluchenia.length() - 1) != '%') {
            addrpodcluchenia = addrpodcluchenia + "%";
        }
        EntityManager em = Proverkatahvozm.entityManager();
        TypedQuery<Proverkatahvozm> q = em.createQuery("SELECT o FROM Proverkatahvozm AS o WHERE LOWER(o.addrpodcluchenia) LIKE LOWER(:addrpodcluchenia)", Proverkatahvozm.class);
        q.setParameter("addrpodcluchenia", addrpodcluchenia);
        return q;
    }
    
    public static TypedQuery<Proverkatahvozm> Proverkatahvozm.findProverkatahvozmsByAddrpodclucheniaLike(String addrpodcluchenia, String sortFieldName, String sortOrder) {
        if (addrpodcluchenia == null || addrpodcluchenia.length() == 0) throw new IllegalArgumentException("The addrpodcluchenia argument is required");
        addrpodcluchenia = addrpodcluchenia.replace('*', '%');
        if (addrpodcluchenia.charAt(0) != '%') {
            addrpodcluchenia = "%" + addrpodcluchenia;
        }
        if (addrpodcluchenia.charAt(addrpodcluchenia.length() - 1) != '%') {
            addrpodcluchenia = addrpodcluchenia + "%";
        }
        EntityManager em = Proverkatahvozm.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Proverkatahvozm AS o WHERE LOWER(o.addrpodcluchenia) LIKE LOWER(:addrpodcluchenia)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Proverkatahvozm> q = em.createQuery(queryBuilder.toString(), Proverkatahvozm.class);
        q.setParameter("addrpodcluchenia", addrpodcluchenia);
        return q;
    }
    
    public static TypedQuery<Proverkatahvozm> Proverkatahvozm.findProverkatahvozmsByManager(Manager manager, String sortFieldName, String sortOrder) {
        if (manager == null) throw new IllegalArgumentException("The manager argument is required");
        EntityManager em = Proverkatahvozm.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Proverkatahvozm AS o WHERE o.manager = :manager");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Proverkatahvozm> q = em.createQuery(queryBuilder.toString(), Proverkatahvozm.class);
        q.setParameter("manager", manager);
        return q;
    }
    
    public static TypedQuery<Proverkatahvozm> Proverkatahvozm.findProverkatahvozmsByTvexistence(TVexist tvexistence, String sortFieldName, String sortOrder) {
        if (tvexistence == null) throw new IllegalArgumentException("The tvexistence argument is required");
        EntityManager em = Proverkatahvozm.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Proverkatahvozm AS o WHERE o.tvexistence = :tvexistence");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Proverkatahvozm> q = em.createQuery(queryBuilder.toString(), Proverkatahvozm.class);
        q.setParameter("tvexistence", tvexistence);
        return q;
    }
    
}
