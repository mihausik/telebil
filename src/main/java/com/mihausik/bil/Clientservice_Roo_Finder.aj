// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mihausik.bil;

import com.mihausik.bil.Client;
import com.mihausik.bil.Clientservice;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Clientservice_Roo_Finder {
    
    public static Long Clientservice.countFindClientservicesByClient(Client client) {
        if (client == null) throw new IllegalArgumentException("The client argument is required");
        EntityManager em = Clientservice.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Clientservice AS o WHERE o.client = :client", Long.class);
        q.setParameter("client", client);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Clientservice> Clientservice.findClientservicesByClient(Client client) {
        if (client == null) throw new IllegalArgumentException("The client argument is required");
        EntityManager em = Clientservice.entityManager();
        TypedQuery<Clientservice> q = em.createQuery("SELECT o FROM Clientservice AS o WHERE o.client = :client", Clientservice.class);
        q.setParameter("client", client);
        return q;
    }
    
    public static TypedQuery<Clientservice> Clientservice.findClientservicesByClient(Client client, String sortFieldName, String sortOrder) {
        if (client == null) throw new IllegalArgumentException("The client argument is required");
        EntityManager em = Clientservice.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Clientservice AS o WHERE o.client = :client");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Clientservice> q = em.createQuery(queryBuilder.toString(), Clientservice.class);
        q.setParameter("client", client);
        return q;
    }
    
}
